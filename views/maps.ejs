<% include ./partials/header %>
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            
            height: 60%;
            width: 100%;
            margin: 0 auto;
        }
          
    </style>
    <h1 style="text-align: center;">Maps</h1>
        <div id="map"></div>
            
           
<script>
    var map, results = <%- JSON.stringify(results)%>;

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 13,
            center: {
                lat: 37.775,
                lng: -122.434
            },
            mapTypeId: 'satellite'
        });
        var infowindow = new google.maps.InfoWindow(); /* SINGLE */
        var heatmap_points = genPoints(results);
        var heatmap = new google.maps.visualization.HeatmapLayer({
            data: heatmap_points,
            map: map,
            opacity: 0.8
        });

        var locations = genInfo(results);
        var markers = [];

        for (i = 0; i < locations.length; i++) {
            var latLng = new google.maps.LatLng(locations[i][0], locations[i][1]);
            var contentString = locations[i][2];

            marker = new google.maps.Marker({
                position: latLng,
                map: map,
                contentString: contentString,
                icon: locations[i][4],
                visible: false
            });

            markers.push(marker);

            var infowindow = new google.maps.InfoWindow({});

            marker.addListener('click', function() {

                infowindow.setContent(this.contentString);
                infowindow.open(map, this);
                map.setCenter(this.getPosition());
                // marker.zIndex = 1;
            });

            map.addListener('zoom_changed', function() {
                infowindow.close();
                var zoom = map.getZoom();
                var on = true;
                if (zoom >= 18) {
                    on = true;
                    heatmap.set('opacity', 0.001);
                } else {
                    on = false;
                    heatmap.set('opacity', 0.8);
                }
                for (i = 0; i < locations.length; i++) {
                    markers[i].setVisible(on);
                }
            });
        }

        map.fitBounds(fitScreen(heatmap_points));
    }

    function genInfo(results) {
        var locations = [];
        for (i = 0; i < results.length; i++) {
            for (var key in results[i]) {
                if (results[i].hasOwnProperty(key)) {
                    locations.push([results[i][key].latitude, results[i][key].longitude, results[i][key].name, results[i][key].status, results[i][key].picture])
                }
            }
        }
        return locations;
    }

    function changeGradient() {
        var gradient = [
            'rgba(0, 255, 255, 0.5)',
            'rgba(0, 255, 255, 1)',
            'rgba(0, 191, 255, 1)',
            'rgba(0, 127, 255, 1)',
            'rgba(0, 63, 255, 1)',
            'rgba(0, 0, 255, 1)',
            'rgba(0, 0, 223, 1)',
            'rgba(0, 0, 191, 1)',
            'rgba(0, 0, 159, 1)',
            'rgba(0, 0, 127, 1)',
            'rgba(63, 0, 91, 1)',
            'rgba(127, 0, 63, 1)',
            'rgba(191, 0, 31, 1)',
            'rgba(255, 0, 0, 1)'
        ]
        heatmap.set('gradient', heatmap.get('gradient') ? null : gradient);
    }

    function fitScreen(points) {
        var markers = [];
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < points.length; i++) {
            bounds.extend(points[i]);
        }
        return bounds;
    }

    function changeRadius() {
        heatmap.set('radius', heatmap.get('radius') ? null : 40);
    }

    function changeOpacity() {
        heatmap.set('opacity', heatmap.get('opacity') ? null : 0.2);
    }

    function genPoints(results) {
        var points = [];
        for (i = 0; i < results.length; i++) {
            for (var key in results[i]) {
                if (results[i].hasOwnProperty(key)) {
                    points.push(new google.maps.LatLng(results[i][key].latitude, results[i][key].longitude));
                }
            }
        }
        return points;
    }

</script>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
            <script async defer
                src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=visualization&key=<%=process.env.APIKEY%>&callback=initMap">
            </script>

<% include ./partials/footer %>